[["line-graphs-and-time-series.html", "11 Line Graphs and Time Series 11.1 Line Graphs 11.2 Other Tools for Time Series 11.3 Seasonality, Cycles, and “Normalizing” Data 11.4 Variations", " 11 Line Graphs and Time Series 11.1 Line Graphs Line graphs are ideal when you want to show trends or show the relationship between two numerical variables. For the next few examples, we’ll switch away from our hotel_bookings.csv data and look at another real dataset of purchase card transactions made by employees of the City of San Jose, CA, USA. ### Make a line graph of total transactions by month # Summarize the data and feed it to ggplot PCard %&gt;% group_by(Year, Month) %&gt;% summarize(date = min(Date), Count = n()) %&gt;% ggplot(aes(x = date, y = Count)) + geom_line(color = &quot;#7a0019&quot;) + labs(x = &quot;Month&quot;, y = &quot;Total Transactions&quot;, title = &quot;Number of Purchase Card Transactions by Month&quot;) + scale_x_date(date_labels = &quot;%b %y&quot;, date_breaks = &quot;6 months&quot;) + theme(plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), plot.background=element_rect(fill=&quot;#ffffff&quot;), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.ticks.length = unit(.25, &quot;cm&quot;), axis.line = element_line(color = &quot;black&quot;), legend.position = &quot;none&quot;) Sometimes you might want to plot multiple lines on a plot. There’s one employee who has far more transactions than anyone else. ### Analyze total number of transactions by month # Create a dataframe with transactions by each employee by month # only looking at employees who had a month with at least 50 transctions PCard %&gt;% group_by(CardholderName, Year, Month) %&gt;% summarize(date = min(Date), Count = n()) %&gt;% filter(max(Count)&gt;60) %&gt;% ggplot(aes(x = date, y = Count, color = CardholderName)) + geom_line() + labs(x = &quot;Month&quot;, y = &quot;Total Transactions&quot;, title = &quot;Number of Purchase Card Transactions by Month by Employee&quot;) + scale_color_manual(values = c(&quot;grey50&quot;, &quot;grey50&quot;, &quot;grey50&quot;, &quot;grey50&quot;, &quot;#7a0019&quot;, &quot;grey50&quot;, &quot;grey50&quot;, &quot;grey50&quot;, &quot;grey50&quot;, &quot;grey50&quot;, &quot;grey50&quot;)) + scale_x_date(date_labels = &quot;%b %y&quot;, date_breaks = &quot;6 months&quot;) + theme(plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), plot.background=element_rect(fill=&quot;#ffffff&quot;), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.ticks.length = unit(.25, &quot;cm&quot;), axis.line = element_line(color = &quot;black&quot;), legend.position = &quot;none&quot;) Who is this and what department do they work for? Let’s make a quick table, looking at the top five people by the number of purchase card transactions they’ve made. library(knitr) PCard %&gt;% group_by(CardholderName, Department) %&gt;% summarize(Transactions = n(), MeanAmount = dollar(mean(Amount))) %&gt;% arrange(-Transactions) %&gt;% head(n=5) %&gt;% kable(col.names = c(&quot;Cardholder Name&quot;, &quot;Department&quot;, &quot;Total Transactions&quot;, &quot;Mean Amount&quot;)) Cardholder Name Department Total Transactions Mean Amount MARCIA ROUVELL LIBRARY 2929 $5.67 ALBERT RODRIGUEZ PARKS AND REC 1877 $246.53 MICHELLE KAHIHIKOLO FIRE DEPARTMENT 1665 $415.21 TINA YU TAYLOR ENVIRONMENTAL SERVICES 1663 $311.43 JOEL CAVINTA PUBLIC WORKS 1481 $327.83 If you dig into the data, we see a large number of small dollar transactions for postage purchased by this employee. 11.2 Other Tools for Time Series Suppose we want to see if the distribution has changed over time? We can’t aggregate with the sum or count and use a line graph (because then we wouldn’t see all the points.) 11.2.1 Scatterplot We can use a scatterplot to plot each point. Let’s switch back to the hotel dataset for a minute. Let’s plot the price paid by month (and considering our earlier concerns about overplotting, we’ll look at a sample, jitter, and use transparency.) ### Use a scatterplot to plot the ADR (Average Daily Rate, $) by month # We&#39;ll take a sample bookingdata %&gt;% sample_frac(0.05) %&gt;% mutate(arrival_date_month = factor(arrival_date_month, levels = c(&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;))) %&gt;% ggplot(aes(x = arrival_date_month, y = adr)) + geom_jitter(color = &quot;#00759a&quot;, alpha = 0.7) + labs(x = &quot;Month&quot;, y = &quot;Average Daily Rate&quot;, title = &quot;ADR ($) tends to increase in the summer months&quot;, subtitle = &quot;Each point represents one booking&quot;) + scale_y_continuous(labels = scales::dollar_format()) + scale_x_discrete(labels = c(&quot;January&quot; = &quot;Jan&quot;, &quot;February&quot; = &quot;Feb&quot;, &quot;March&quot; = &quot;Mar&quot;, &quot;April&quot; = &quot;Apr&quot;, &quot;August&quot; = &quot;Aug&quot;, &quot;September&quot; = &quot;Sept&quot;, &quot;October&quot; = &quot;Oct&quot;, &quot;November&quot; = &quot;Nov&quot;, &quot;December&quot; = &quot;Dec&quot;)) + theme(legend.position = &quot;none&quot;, # Hide legend plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.line.x = element_line(color = &quot;black&quot;)) Well look at that! 11.2.2 Box plot Box plots are excellent for looking at changes in a distribution over time. Suppose we want to look at prices by month. Here I’m using a style proposed by Tufte which uses a dot for the median, a gap for the interquartile range, and lines for whiskers. It’s useful when there are so many values side by side and a dataset (like the hotelbookings dataset) that has many outliers). It’s not perfect though; I struggle sometimes visualizing the “blank space” where the bulk of the data points are. ### Make a Tufte-style boxplot # This plots the median as a dot, the IQR as a blank space, and the whiskers+outliers as a line. # Load ggthemes package library(ggthemes) # Tufte-style boxplot bookingdata %&gt;% filter(hotel == &quot;City Hotel&quot;) %&gt;% mutate(arrival_date_month = factor(arrival_date_month, levels = c(&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;))) %&gt;% ggplot(aes(x = arrival_date_month, y = adr)) + geom_tufteboxplot(color = &quot;#00759a&quot;) + labs(x = &quot;Month&quot;, y = &quot;Average Daily Rate&quot;, title = &quot;Boxplot Time Series (Tufte-Style Dot+Whisker)&quot;, subtitle = &quot;City Hotel Average Daily Rate ($) by Month (2015-2017)&quot;) + scale_y_continuous(labels = scales::dollar_format()) + scale_x_discrete(labels = c(&quot;January&quot; = &quot;Jan&quot;, &quot;February&quot; = &quot;Feb&quot;, &quot;March&quot; = &quot;Mar&quot;, &quot;April&quot; = &quot;Apr&quot;, &quot;August&quot; = &quot;Aug&quot;, &quot;September&quot; = &quot;Sept&quot;, &quot;October&quot; = &quot;Oct&quot;, &quot;November&quot; = &quot;Nov&quot;, &quot;December&quot; = &quot;Dec&quot;)) + theme(legend.position = &quot;none&quot;, # Hide legend plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.line.x = element_line(color = &quot;black&quot;)) 11.3 Seasonality, Cycles, and “Normalizing” Data 11.3.1 Plotting Cyclical Data Identifying cycles or seasonality in data is often important for forecasting. Let’s plot the number of purchase card transactions by month, with a separate line for each year. ### Make a line graph of total transactions by month # Summarize the data and feed it to ggplot PCard %&gt;% group_by(Year, Month) %&gt;% summarize(Count = n(), Year = factor(Year)) %&gt;% ggplot(aes(x = Month, y = Count, color = Year)) + geom_line() + scale_color_brewer(palette = &quot;GnBu&quot;) + scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11), labels = c(&quot;January&quot;, &quot;March&quot;, &quot;May&quot;, &quot;July&quot;, &quot;September&quot;, &quot;November&quot;)) + labs(x = &quot;Month&quot;, y = &quot;Total Transactions&quot;, title = &quot;Number of Purchase Card Transactions by Month&quot;) + theme(plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), plot.background=element_rect(fill=&quot;#ffffff&quot;), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.ticks.length = unit(.25, &quot;cm&quot;), axis.line = element_line(color = &quot;black&quot;), legend.position = &quot;right&quot;) Interestingly, we see that in 2014 and 2015, there was a huge drop-off around the middle of the year. Maybe they ran out of funding then? But in recent years, it’s more controlled and even throughout the year. There are some advanced prediction methods called ARIMA that can help make predictions with this kind of data. They’re outside the scope of this class, but are commonly used in finance. What could be improved on this graph? Well, the colors aren’t perfect. Some are a little hard to see. And maybe we could add year labels for 2014 and 2015. 11.3.2 Normalization Okay, let’s look at the graph above. But maybe just a couple years, 2016-2018, so it’s a little easier to see. And for this, the year doesn’t really matter, so we’ll just make everything blue again. ### Make a line graph of total transactions by month # Summarize the data and feed it to ggplot PCard %&gt;% filter(Year&gt;2015) %&gt;% group_by(Year, Month) %&gt;% summarize(Count = n()) %&gt;% mutate(Year = factor(Year)) %&gt;% ggplot(aes(x = Month, y = Count, group = Year)) + geom_line(color = &quot;#00759a&quot;) + scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11), labels = c(&quot;January&quot;, &quot;March&quot;, &quot;May&quot;, &quot;July&quot;, &quot;September&quot;, &quot;November&quot;)) + labs(x = &quot;Month&quot;, y = &quot;Total Transactions&quot;, title = &quot;Number of Purchase Card Transactions by Month: 2016-2019&quot;) + theme(plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), plot.background=element_rect(fill=&quot;#ffffff&quot;), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.ticks.length = unit(.25, &quot;cm&quot;), axis.line = element_line(color = &quot;black&quot;), legend.position = &quot;right&quot;) Quite a consistent sawtooth pattern year-to-year. You’ll see this a lot in finance, sales, marketing, donation, etc data. Why? Let’s go back to the data generating process. Where did this data come from? Well, this is purchase card data that people made for their jobs. Most people do most of their work…on workdays! And different months have different numbers of days, and different numbers of workdays. We’ll assume that 2019 is representative (though it does vary year to year!). 30 days has November, April, June and September… Number of Days and Workdays Per Month for 2019 Month Days in Month Workdays (US) January 31 23 February 28 20 March 31 21 April 30 22 May 31 23 June 30 20 July 31 23 August 31 22 September 30 21 October 31 23 November 30 21 December 31 22 Let’s normalize the number of transactions by the number of workdays and see what happens. Does this explain the sawtooth pattern? If it did, we should see, more or less, flat lines. ### Make a line graph of total transactions by month # Summarize the data and feed it to ggplot PCard %&gt;% filter(Year&gt;2015) %&gt;% group_by(Year, Month) %&gt;% summarize(Count = n()) %&gt;% mutate(Year = factor(Year), Count = as.numeric(Count), Normalized_Count = case_when(Month == 1 ~ Count / 23, Month == 2 ~ Count / 20, Month == 3 ~ Count / 21, Month == 4 ~ Count / 22, Month == 5 ~ Count / 23, Month == 6 ~ Count / 20, Month == 7 ~ Count / 23, Month == 8 ~ Count / 22, Month == 9 ~ Count / 21, Month == 10 ~ Count / 23, Month == 11 ~ Count / 21, Month == 12 ~ Count / 21, TRUE ~ Count / 22)) %&gt;% ggplot(aes(x = Month, y = Normalized_Count, group = Year)) + geom_line(color = &quot;#00759a&quot;) + scale_x_continuous(breaks = c(1, 3, 5, 7, 9, 11), labels = c(&quot;January&quot;, &quot;March&quot;, &quot;May&quot;, &quot;July&quot;, &quot;September&quot;, &quot;November&quot;)) + labs(x = &quot;Month&quot;, y = &quot;Total Transactions&quot;, title = &quot;Purchase Card Transactions Per Workday by Month: 2016-2019&quot;) + theme(plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), plot.background=element_rect(fill=&quot;#ffffff&quot;), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.ticks.length = unit(.25, &quot;cm&quot;), axis.line = element_line(color = &quot;black&quot;), legend.position = &quot;right&quot;) It looks like we don’t see that here. So perhaps there really is a cyclical nature to the purchasing patterns. This is something you could look at in your Lab…is there specific cycle to any one department? It looks like the number of workdays in the month doesn’t matter. But do people make more purchases on weekdays? Let’s check. ### Make a line graph of total transactions by weekday # Summarize the data and feed it to ggplot PCard %&gt;% mutate(weekday = factor(weekdays(Date), levels = c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;))) %&gt;% group_by(weekday) %&gt;% summarize(Count = n()) %&gt;% ggplot(aes(x = weekday, y = Count, group = 1)) + geom_line(color = &quot;#00759a&quot;) + labs(x = &quot;Day of the Week&quot;, y = &quot;Total Transactions&quot;, title = &quot;Purchase Card Transactions Per Weekday&quot;) + theme(plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), plot.background=element_rect(fill=&quot;#ffffff&quot;), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.ticks.length = unit(.25, &quot;cm&quot;), axis.line = element_line(color = &quot;black&quot;), legend.position = &quot;right&quot;) So there is a drop off! Notice, though that we grouped everything by day, regardless of year. Was it different year-to-year? ### Make a line graph of total transactions by weekday # Summarize the data and feed it to ggplot linegraph_data &lt;- PCard %&gt;% mutate(weekday = factor(weekdays(Date), levels = c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;))) %&gt;% group_by(Year, weekday) %&gt;% summarize(Count = n()) %&gt;% mutate(Year = factor(Year), y_pos = as.numeric(Count), y_pos = case_when(Year == &quot;2018&quot; ~ y_pos - 800, Year == &quot;2020&quot; ~ y_pos - 500, Year == &quot;2019&quot; ~ y_pos + 750, Year == &quot;2016&quot; ~ y_pos + 450, TRUE ~ y_pos)) linegraph_data %&gt;% ggplot(aes(x = weekday, y = Count, color = Year, group = Year)) + geom_line() + geom_text(data = linegraph_data %&gt;% filter(weekday == &quot;Sunday&quot;), aes(label = Year, color = Year, x = 7.3, y = y_pos)) + scale_color_manual(values = c(&quot;2020&quot; = &quot;#7a0019&quot;, &quot;2015&quot; = &quot;#5b0013&quot;, &quot;2016&quot; = &quot;#00759a&quot;, &quot;2017&quot; = &quot;#ffcc33&quot;, &quot;2018&quot; = &quot;gray40&quot;, &quot;2019&quot; = &quot;black&quot;, &quot;2014&quot; = &quot;steelblue&quot;)) + labs(x = &quot;Day of the Week&quot;, y = &quot;Total Transactions&quot;, title = &quot;Purchase Card Transactions Per Weekday&quot;) + theme(plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), plot.background=element_rect(fill=&quot;#ffffff&quot;), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.ticks.length = unit(.25, &quot;cm&quot;), axis.line = element_line(color = &quot;black&quot;), legend.position = &quot;none&quot;) 11.4 Variations 11.4.1 Slope Graph Slope graphs can show changes over an interval (say, start to finish, or between two years) and are ideal for showing changes between groups or categories. They can make it easy to show changes in position or ranking. They often show just two periods (two points/one line per category) but they can be extended to more than two periods if the data isn’t too crowded. Let’s look at the change in some NBA team rankings. ### Make a Slope Graph to examine NBA team rankings # Eastern Conference Rankings NBA_rankings &lt;- tibble( team = c(&quot;Bucks&quot;, &quot;Raptors&quot;, &quot;76ers&quot;, &quot;Celtics&quot;, &quot;Pacers&quot;, &quot;Nets&quot;, &quot;Magic&quot;, &quot;Heat&quot;), rank2018 = c(1, 2, 3, 4, 5, 6, 7, 10), rank2019 = c(1, 2, 6, 3, 4, 7, 8, 5), rank2020 = c(1, 2, 6, 3, 4, 7, 8, 5) ) # Transform the wide data into long data NBA_rankings &lt;- NBA_rankings %&gt;% pivot_longer(cols = -team, names_to = &quot;Year&quot;, names_prefix = &quot;rank&quot;, values_to = &quot;Rank&quot;) NBA_rankings &lt;- NBA_rankings %&gt;% mutate(Year = as.numeric(Year)) # Create the Slope Graph NBA_rankings %&gt;% ggplot(aes(x = Year, y = Rank, color = team)) + geom_line() + geom_text(data = NBA_rankings %&gt;% filter(Year == 2020), aes(label = team, y = Rank, x = 2020.2, color = team)) + geom_label(aes(label = Rank, color = team), fill = &quot;white&quot;, label.size = 0) + scale_x_continuous(breaks = c(2018, 2019, 2020), position = &quot;top&quot;) + scale_y_reverse() + scale_color_manual(values = c(&quot;Bucks&quot; = &quot;#00471B&quot;, &quot;76ers&quot; = &quot;#006BB6&quot;, &quot;Celtics&quot; = &quot;#007A33&quot;, &quot;Nets&quot; = &quot;black&quot;, &quot;Magic&quot; = &quot;gray40&quot;, &quot;Pacers&quot; = &quot;#002D62&quot;, &quot;Raptors&quot; = &quot;#CE1141&quot;, &quot;Heat&quot; = &quot;#98002E&quot;)) + labs(title = &quot;NBA Team Rankings&quot;, x = &quot;&quot;, y = &quot;&quot;) + theme(plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), plot.background=element_blank(), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.line = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank(), axis.text.x = element_text(color = &quot;black&quot;), legend.position = &quot;none&quot;) You’re really looking for two things on slope graphs: Parallel lines which mean that relative positions stayed the same or there was no change Slopes and Intersections which reflect changes In the NBA example above, there are two big changes…the Miami Heat shoot from 10th place to 5th from 2018 to 2019, and the Philadelphia 76ers drop from 3rd to 6th. What happens between 2019 and 2020? Everything stayed the same, hence the parallel lines. 11.4.2 Tufte-Style Line Graph An extension of the slope graph is the line graph style espoused by Tufte. These can work well with a few groups and enough space on the plot, but they don’t work as well if things are very complicated/crowded. # Line graph with bookings by month bookingdata %&gt;% # Take the booking data group_by(hotel, arrival_date_year, arrival_date_month) %&gt;% # Group observations hotel &amp; month-year summarise(Stays = n()) %&gt;% # Count number of bookings mutate(booking_date = dmy(paste0(&quot;01&quot;, arrival_date_month, arrival_date_year))) %&gt;% filter(between(booking_date, as_date(&quot;2016-01-01&quot;), as_date(&quot;2016-06-02&quot;))) %&gt;% ggplot(aes(x = booking_date, y = Stays, color = hotel)) + geom_line() + geom_label(aes(label = Stays, color = hotel), fill = &quot;white&quot;, label.size = 0) + geom_text(aes(x = as.Date(&quot;2016-06-13&quot;), y = 3923, label = &quot;City Hotel&quot;), color = &quot;#7a0019&quot;, hjust = 0) + geom_text(aes(x = as.Date(&quot;2016-06-13&quot;), y = 1369, label = &quot;Resort Hotel&quot;), color = &quot;#00759a&quot;, hjust = 0)+ scale_color_manual(values = c(&quot;#7a0019&quot;, &quot;#00759a&quot;)) + scale_x_date(labels = date_format(&quot;%B&quot;), limits = c(as_date(&quot;2016-01-01&quot;), as_date(&quot;2016-07-15&quot;)), #breaks = date_breaks(&quot;1 month&quot;)) + breaks = seq.Date(from = as_date(&quot;2016-01-01&quot;), to = as_date(&quot;2016-06-01&quot;), by = &quot;1 month&quot;)) + scale_y_continuous(labels = scales::comma_format()) + labs(x=&quot;&quot;, y = &quot;&quot;, title=&quot;Number of Bookings by Hotel for 2016&quot;) + theme(legend.position = &quot;none&quot;, # Hide legend plot.title = element_text(hjust=0.5, face=&quot;bold&quot;), panel.background=element_blank(), panel.grid.minor=element_blank(), panel.grid.major.y=element_blank(), panel.grid.major.x=element_line(), axis.ticks.y = element_blank(), axis.text.y = element_blank(), axis.line.x = element_line(color = &quot;black&quot;)) They certainly don’t work if you have many values (e.g. daily data over many years). "]]
